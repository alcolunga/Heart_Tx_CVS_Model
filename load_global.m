% ***********************************************************************************
%                          L O A D  G L O B A L  for
%            C A R D I O V A S C U L A R   S Y S T E M S   M O D E L
% ***********************************************************************************
% Copyright (C) 2019 A.L. Colunga(1), N.P. Woodall(1), M.S. Olufsen(1), and
% B.E. Carlson(2)
% 
% 1) Department of Mathematics, NC State University 
% 2) Molecular and Integrative Physiology, University of Michigan
% 
% Permission is hereby granted, free of charge, to any person obtaining a copy of
% this software and associated documentation files (the "Software"), to deal in
% the Software without restriction, including without limitation the rights to
% use, copy, modify, and merge the Software subject to the following conditions:
% 
% The above copyright notice and this permission notice shall be included in all
% copies or substantial portions of the Software.
% 
% Any work resulting from the use of the Software should cite the associated 
% article arXiv:1812.11857
% 
% THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
% WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
% MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
% ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
% WHATSOEVER RESULTING FROM LOSS OF USE, OR DATA, WHETHER IN AN
% ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
% OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
% ***********************************************************************************

% ***********************************************************************************
% This function calculates nominal parameter values and initial conditions.
% 
% Input:
% data   structure with patient data generated by Patient233.m
% 
% Output: 
% gPars  structure with nominal parameter values
% Init   vector with initial conditions
%
% References:
% Benekin 
% Smith & Andreassen
% Burkhoff
% ***********************************************************************************
function [gPars, Init] = load_global(data)

% Tolerance for ODE solver
gPars.ABS_TOL  = 1e-12;
gPars.REL_TOL  = gPars.ABS_TOL/10;

% Right Ventricle (RV)
P_RVsyst   = data.P_RVsyst;                  % Systolic  RV pressure (mmHg)  
P_RVdiast  = data.P_RVdiast;                 % Diastolic RV pressure (mmHg)  

% Pulmonary Arteries (PA)
P_PAsyst   = data.P_PAsyst;                  % Systolic  PA pressure (mmHg)  
P_PAdiast  = data.P_PAdiast;                 % Diastolic PA pressure (mmHg) 
P_PApp     = P_PAsyst - P_PAdiast;           % PA pulse pressure     (mmHg)
P_PAm      = P_PAsyst/3 + 2*P_PAdiast/3;     % PA mean pressure      (mmHg)

% Thorax (th)
P_th       = 0;                              % Thoracic pressure                             

% Pulmonary Veins (PU)
P_PUpp    = .2*P_PApp;                       % PU pulse pressure (mmHg) 
P_PUm     = data.P_PCWave;                   % PU mean pressure  (mmHg)
P_PUdiast = P_PUm - P_PUpp/3;                % PU diastolic pressure (mmHg)
P_PUsyst  = P_PUm + 2*P_PUpp/3;              % PU systolic pressure  (mmHg)

% Systemic Arteries (SA)
P_SAsyst  = data.P_SAsyst;                   % Systolic SA pressure  (mmHg)    
P_SAdiast = data.P_SAdiast;                  % Diastolic SA pressure (mmHg)   
P_SApp    = P_SAsyst - P_SAdiast;            % SA pulse pressure     (mmHg)
P_SAm     = P_SAsyst/3 + 2*P_SAdiast/3;      % SA mean pressure      (mmHg)

% Left ventricle (LV)
P_LVsyst  = 1.025 * P_SAsyst;                % Systolic  LV pressure (mmHg)
P_LVdiast = 0.975 * P_PUdiast;               % Diastolic LV pressure (mmHg)

% Systemic Veins (SV)
P_SVdiast = 1.025*P_RVdiast;                 % Diastolic SV pressure (mmHg)
P_SVpp    = .05*P_SApp;                      % SV pulse pressure     (mmHg)
P_SVsyst  = P_SVdiast + P_SVpp;              % Systolic SV pressure  (mmHg)
P_SVm     = P_SVsyst/3 + 2*P_SVdiast/3;      % SV mean pressure      (mmHg)

% Other data
Ave_HR    = data.Ave_HR;                     % Average heart rate (beats/min)
gPars.period  = 60/Ave_HR;                   % Period of heart beat (s)
CO        = data.CO_Thermo;                  % Cardiac output (thermodilution) (L/min)
BW        = data.BW;                         % Body weight (kg)                
Hgt       = data.Hgt;                        % Height (cm)                     
Gender    = data.Gender;                     % Gender (1=female, 2=male)       

if (Gender == 2)  
        TotBV = ((0.3669 * (Hgt/100)^3) + (0.03219 * BW) + 0.6041) * 1000; % Total blood volume (mL)
        BSA   = 0.000579479 * BW^0.38 * Hgt^1.24;                          % Body surface area (m^2)
    else
        TotBV = ((0.3561 * (Hgt/100)^3) + (0.03308 * BW) + 0.1833) * 1000; % Total blood volume (mL)
        BSA   = 0.000975482 * BW^0.46 * Hgt^1.08;                          % Body surface area (m^2)
end

V_LVM = 93*BSA - 16;      % Max LV volume (End Diastolic Volume in LV (mL) 
SV    = CO/(Ave_HR/60);   % Left stroke volume (mL/beat)
V_LVm = V_LVM - SV;       % Min LV volume (End Systolic Volume in LV mL)

V_RVM = 0.9*V_LVM;        % Max RV volume (10% higher than the  V_LV)  
V_RVm = 0.9*V_LVm;        % Min RV volume (10% higher than the  V_LV)

% Distribution of volume outside the heart (fractions add to 1)
sart = 0.13;     % Benekin 
part = 0.03;     % Benekin 
svein= 0.64;     % Benekin  (note we took volume from the systemic veins and put into the heart)
pvein= 0.11;     % Benekin  

% Circulating (stressed volume)
Circ_pa =  0.58 * part*TotBV;   % PA volume from Benekin   
Circ_pu =  0.11 * pvein*TotBV;  % PU volume from Benekin  
Circ_sa =  0.27 * sart*TotBV;   % SA volume from Benekin
Circ_sv =  0.08 * svein*TotBV;  % SV volume from Benekin

% Total circulating (stressed volume)
CircBV =  Circ_pa + Circ_pu + Circ_sa + Circ_sv;

% Elastance function driver parameters
H  = Ave_HR;                               % 1  Elastance function parameter (1/s^2)
T2 = gPars.period/2;                       % 2  Elastance function parameter (s)

% Left ventricle free wall parameters
V_d_lvf    = 10;                           % 4 LV end systolic zero pressure volume (mL) from Smith & Andreassen
E_lvf      = P_SAsyst /(V_LVm - V_d_lvf);  % 3 LV free wall elastance (mmHg/mL) 
P_0_lvf    = 0.125;                        % 5 LV end diastolic pressure (mmHg) from Smith & Andreassen
lambda_lvf = .03;                          % 6 LV end diastolic pressure (1/mL) from Burkhoff
V_0_lvf    = V_d_lvf+2;                    % 7 LV end diastolic pressure (mL) from Smith & Andreassen

% Right ventricle free wall parameters
V_d_rvf    = 0.9*V_d_lvf;                  % 9 RV end systolic zero pressure volume (mL) from Smith & Andreassen
E_rvf      = P_PAsyst/(V_RVm -V_d_rvf);    % 8 RV free wall elast (mmHg/mL) 
P_0_rvf    = 0.25;                         % 10 RV end diastolic pressure (mmHg) from Smith & Andreassen
lambda_rvf = 0.025;                        % 11 RV end diastolic pressure (1/mL) from Burkhoff
V_0_rvf    = 0.9*(V_d_lvf+2);              % 12 RV end diastolic pressure (mL)from Smith & Andreassen

% Pulmonary artery and vein parameters
E_pa = P_PAsyst/Circ_pa;                % 13 PA artery elastance (mmHg/mL)  
E_pu = P_PUm/Circ_pu;                   % 14 PU elastance (mmHg/mL)  
R_pul   = (P_PAsyst - P_PUm)/CO;           % 15 Pulmonary vascular resistance (mmHg*s/mL) 

% Systemic artery and vein parameters
E_sa    = P_SAsyst/Circ_sa;                % 16 SA elastance (mmHg/mL)  
E_sv    = P_SVm/Circ_sv;                   % 17 SV elastance (mmHg/mL)
R_sys   = (P_SAsyst - P_SVm)/CO;           % 18 Systemic vascular resistance (mmHg*s/mL) 

% Heart valve paramenters
R_mt  = (P_PUdiast - P_LVdiast)/CO;        % 19 Mitral valve resistance (mmHg*s/mL)
R_av  = (P_LVsyst  - P_SAsyst)/CO;         % 20 Aortic valve resistance (mmHg*s/mL)
R_tc  = (P_SVdiast - P_RVdiast)/CO;        % 21 Tricuspid valve resistance (mmHg*s/mL)
R_pv  = (P_RVsyst  - P_PAsyst)/CO;         % 22 Pulmonary valve resistance (mmHg*s/mL)
        
%%%%% Initial conditions (stressed volumes) %%%%%
V_lv0 = V_LVM - V_d_lvf;                  % LV volume (mL)
V_rv0 = V_RVM - V_d_rvf;                  % RV volume (mL)
V_pa0 = Circ_pa;                          % PA volume (mL)
V_pu0 = Circ_pu;                          % PU volume (mL) 
V_sa0 = Circ_sa;                          % SA volume (mL)
V_sv0 = Circ_sv;                          % SV volume (mL)

Init = [V_lv0, V_rv0, V_pa0, V_pu0, V_sa0, V_sv0];
    
%%%%% Model parameters %%%%%
pars = [H T2                                ...  %  1 -  2
E_lvf V_d_lvf P_0_lvf lambda_lvf  V_0_lvf   ...  %  3 -  7
E_rvf V_d_rvf P_0_rvf lambda_rvf  V_0_rvf   ...  %  8 - 12
E_pa  E_pu R_pul                            ...  % 13 - 15
E_sa  E_sv R_sys                            ...  % 16 - 18
R_mt     R_av    R_tc    R_pv;]';           ...  % 19 - 22

%%%%% log-scaled parameters
pars = log(pars);

%%%%% Structure with log-scaled model parameters
gPars.pars = pars;


end 
